require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/bookings", type: :request do
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # BookingsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:booking) { create :booking }
  let(:user) { create :user }
  let(:auth_headers) { user.create_new_auth_token }

  describe "GET /index" do
    it "renders a successful response" do
      sign_in user
      create :booking, name: 'first', description: 'first', start: DateTime.parse('01-02-2022 10:00PM'), end: DateTime.parse('01-02-2022 10:30PM'), user_id: user.id
      get "/bookings?date=20-10-2022&interval=15", headers: auth_headers, as: :json
      expect(response).to be_successful
    end

    it "renders full day of 15 mins interval" do
      get "/bookings?date=20-10-2022&interval=15", headers: auth_headers, as: :json
      expect(JSON.parse(response.body).count).to eq 95
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Booking" do
        booking = {
          name: 'first',
          description: 'first description',
          start: '01-02-2022 10:00PM',
          end: '01-02-2022 11:00PM',
          user_id: user.id
        }
        expect do
          post bookings_url,
               params: { booking: booking, interval: 60, date: '01-02-2022' }, headers: auth_headers, as: :json
        end.to change(Booking, :count).by(1)
      end

      it "renders a JSON response with the new booking" do
        booking = {
          name: 'first',
          description: 'first description',
          start: '01-02-2022 10:00PM',
          end: '01-02-2022 11:00PM',
          user_id: user.id
        }
        post bookings_url,
             params: { booking: booking, interval: 60, date: '01-02-2022' }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders an error when the booking intersects with an interval" do
        create :booking, name: 'first', description: 'first', start: DateTime.parse('01-02-2022 08:00PM'), end: DateTime.parse('01-02-2022 10:30PM'), user_id: user.id

        booking = {
          name: 'first',
          description: 'first description',
          start: '01-02-2022 07:00PM',
          end: '01-02-2022 09:00PM',
          user_id: user.id
        }
        post bookings_url,
             params: { booking: booking, interval: 60, date: '01-02-2022' }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
